{"version":3,"sources":["Components/Wrapper/wrapper.js","Components/Score/score.js","Components/Images/images.js","App.js","serviceWorker.js","index.js"],"names":["style","display","flexDirection","flexWrap","paddingTop","overflow","marginLeft","marginRight","Wrapper","props","className","children","textAlign","height","position","lineHeight","padding","margin","Score","total","status","backgroundColor","borderRadius","maxHeight","marginTop","maxWidth","boxShadow","backgroundPosition","backgroundRepeat","backgroundSize","imgstyle","width","Image","alt","name","src","image","id","onClick","shuffleCards","styling","color","App","state","cards","clicked","score","goal","includes","setState","push","length","i","j","Math","floor","random","this","map","card","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4iEAEMA,G,MAAQ,CACVC,QAAS,OACTC,cAAe,MACfC,SAAU,OACVC,WAAY,OACZC,SAAU,OACVC,WAAY,OACZC,YAAa,SAQFC,EALC,SAAAC,GAAK,OACjB,yBAAKT,MAAOA,EAAOU,UAAU,WAAWD,EAAME,WCX5CX,EAAQ,CACVY,UAAW,SACXC,OAAQ,OACRC,SAAU,WACVC,WAAY,MACZC,QAAS,IACTC,OAAQ,KAYGC,EATD,SAAAT,GAAK,OACf,yBAAKT,MAAOA,EAAOU,UAAU,aACzB,wBAAIA,UAAU,SAAd,eAAmCD,EAAMU,MAAzC,KACA,wBAAIT,UAAU,UAAUD,EAAMW,UCZlCpB,EAAQ,CACRqB,gBAAiB,QACjBC,aAAc,MACdC,UAAW,QACXN,OAAQ,OACRO,UAAW,OACXV,SAAU,WACVW,SAAU,QACVC,UAAW,kCACXrB,SAAU,SACVsB,mBAAoB,UACpBC,iBAAkB,YAClBC,eAAgB,SAEhBC,EAAW,CACXC,MAAQ,QACRlB,OAAQ,QACRc,mBAAoB,UACpBC,iBAAkB,YAClBC,eAAgB,SAWLG,EARD,SAAAvB,GAAK,OACf,yBAAKC,UAAY,2BAA2BV,MAAOA,GAC/C,yBAAKiC,IAAKxB,EAAMyB,KAAMC,IAAK1B,EAAM2B,MAAOC,GAAI5B,EAAM4B,GAC9CC,QAAS,kBAAM7B,EAAM8B,aAAa9B,EAAM4B,KAAK3B,UAAU,eAAeV,MAAO8B,M,OCnBnFU,EAAU,CACdnB,gBAAiB,OACjBR,OAAQ,OACRG,QAAS,OACTyB,MAAO,SA2FMC,E,2MAvFbC,MAAQ,CACNC,QACAC,QAAS,GACTC,MAAO,EACPC,KAAM,GACN3B,OAAQ,I,EAIVmB,aAAe,SAAAF,GACb,IAAIQ,EAAU,EAAKF,MAAME,QAEzB,GAAIA,EAAQG,SAASX,GACnB,EAAKY,SAAS,CACZJ,QAAS,GACTC,MAAO,EACP1B,OAAQ,gDAOV,GAFAyB,EAAQK,KAAKb,GAEY,KAArB,EAAKM,MAAMG,MAAf,CASA,EAAKG,SAAS,CACZL,QACAC,UACAC,MAAOD,EAAQM,OACf/B,OAAQ,KAGV,IAAK,IAAIgC,EAAIR,EAAMO,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADC,EAElB,CAACR,EAAMS,GAAIT,EAAMQ,IAAvCR,EAAMQ,GAFkC,KAE9BR,EAAMS,GAFwB,WAfzC,EAAKJ,SAAS,CACZH,MAAO,EACPD,QAAS,GACTzB,OAAQ,oD,wEAqBN,IAAD,OACP,OACE,yBAAKV,UAAU,OACb,4BAAQV,MAAOwC,EAAS9B,UAAU,cAChC,wBAAIA,UAAU,aAAd,qBACA,uBAAGA,UAAU,aAAb,2CAIF,kBAAC,EAAD,CAAOS,MAAOsC,KAAKd,MAAMG,MAAO1B,OAAQqC,KAAKd,MAAMvB,OAAQ2B,KAAM,KACjE,kBAAC,EAAD,KACGU,KAAKd,MAAMC,MAAMc,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACEpB,aAAc,EAAKA,aACnBF,GAAIsB,EAAKtB,GACTuB,IAAKD,EAAKtB,GACVD,MAAOuB,EAAKvB,WANlB,Y,GA3DUyB,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3267721f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n    display: 'flex',\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    paddingTop: \"10px\",\n    overflow: \"auto\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n}\n\nconst Wrapper = props => (\n    <div style={style} className=\"wrapper\">{props.children}</div>\n);\n\n\nexport default Wrapper;","import React from \"react\";\n\nconst style = {\n    textAlign: \"center\",\n    height: \"70px\",\n    position: \"relative\",\n    lineHeight: \"1em\",\n    padding: \"0\",\n    margin: \"0\"\n}\n\nconst Score = props => (\n    <div style={style} className=\"gameScore\">\n        <h2 className=\"score\">Your Score: {props.total} </h2>\n        <h2 className=\"status\">{props.status}</h2>\n\n    </div>\n);\n\n\nexport default Score;","import React from \"react\";\n\nvar style = {\n    backgroundColor: \"white\",\n    borderRadius: \"2px\",\n    maxHeight: \"400px\",\n    margin: \"1rem\",\n    marginTop: \"10px\",\n    position: \"relative\",\n    maxWidth: \"400px\",\n    boxShadow: \"0 3px 6px #999, 0 3px 6px #999;\",\n    overflow: \"hidden\",\n    backgroundPosition: '50% 50%',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n}\nvar imgstyle = {\n    width:  \"200px\",\n    height: \"200px\",\n    backgroundPosition: \"50% 50%\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n}\n\nconst Image = props => (\n    <div className = \"card img-container hover\" style={style}>\n        <img alt={props.name} src={props.image} id={props.id} \n            onClick={() => props.shuffleCards(props.id)} className=\"shuffleScore\" style={imgstyle}/>\n    </div>\n);\n\n\nexport default Image;","import React from 'react';\nimport './App.css';\nimport Wrapper from \"./Components/Wrapper\";\nimport Score from \"./Components/Score\";\nimport Image from \"./Components/Images/images\";\nimport cards from \"./images.json\";\n\n\nconst styling = {\n  backgroundColor: \"#222\",\n  height: \"80px\",\n  padding: \"10px\",\n  color: \"white\"\n}\n\nclass App extends React.Component {\n  state = {\n    cards,\n    clicked: [],\n    score: 0,\n    goal: 12,\n    status: \"\"\n  }\n\n\n  shuffleCards = id => {\n    let clicked = this.state.clicked;\n\n    if (clicked.includes(id)) {\n      this.setState({\n        clicked: [],\n        score: 0,\n        status: \"Sorry You Lost! Click to Play Again!!!\"\n      })\n      return;\n    }\n    else {\n      clicked.push(id);\n\n      if (this.state.score === 12) {\n        this.setState({\n          score: 0,\n          clicked: [],\n          status: \"Congratulations, You WON!! Click to Play Again\"\n        })\n        return;\n      }\n\n      this.setState({\n        cards,\n        clicked,\n        score: clicked.length,\n        status: \"\"\n      })\n      //*************** */\n      for (let i = cards.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [cards[i], cards[j]] = [cards[j], cards[i]];\n      }\n    }\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header style={styling} className=\"App-header\">\n          <h1 className=\"App-title\">Test Your Memory!</h1>\n          <p className=\"App-intro\">\n            Try not to click the same image twice!\n          </p>\n        </header>\n        <Score total={this.state.score} status={this.state.status} goal={12} />\n        <Wrapper>\n          {this.state.cards.map(card => (\n            <Image\n              shuffleCards={this.shuffleCards}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />\n          ))}\n          })}\n        </Wrapper>\n\n      </div>\n    )\n  }\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}